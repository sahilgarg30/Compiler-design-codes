program moduleDeclarations otherModules driverModule otherModules :
    0.tree = new ProgramNode(decls=1.tree, driver=3.tree, modules=2.tree);
    3.next = 4.tree; 2.driver = 3.tree; 4.driver = NULL;
moduleDeclarations moduleDeclaration moduleDeclarations : 0.tree = 1.tree; 1.next = 2.tree;
moduleDeclarations : 0.tree = NULL
moduleDeclaration DECLARE MODULE ID SEMICOL : 0.tree = new IDListNode(var=3.varname);
otherModules module otherModules : 0.tree = 1.tree; 1.next = 2.tree; 2.driver = 0.driver;
otherModules : 0.tree = 0.driver;
driverModule DRIVERDEF DRIVER PROGRAM DRIVERENDDEF moduleBody :
    0.tree = new ModuleNode(name=NULL, iParamList=NULL, oParamList=NULL, body=5.tree, next=0.next);
module DEF MODULE ID ENDDEF TAKES INPUT SQBO iParamList SQBC SEMICOL oParamStmt moduleBody :
    0.tree = new ModuleNode(name=3.varname, iParamList=8.tree, oParamList=11.tree, body=12.tree, next=0.next);
    registerModule(3.varname);
moduleBody START stmts END : 0.tree = 2.tree;
stmts stmt stmts : 0.tree = 1.tree; 1.next = 2.tree;
stmts : 0.tree = NULL;

oParamStmt RETURNS SQBO oParamList SQBC SEMICOL : 0.tree = 3.tree;
oParamStmt : 0.tree = NULL;
oParamList oParam oParamList2 : 0.tree = 1.tree; 1.next = 2.tree;
oParamList2 COMMA oParam oParamList2 : 0.tree = 2.tree; 2.next = 3.tree;
oParamList2 : 0.tree = NULL;
oParam ID COLON basicType :
    0.tree = new IDTypeListNode(var=1.lexeme, type=3.type, size=0, next=0.next);
iParamList iParam iParamList2 : 0.tree = 1.tree; 1.next = 2.tree;
iParamList2 COMMA iParam iParamList2 : 0.tree = 2.tree; 2.next = 3.tree;
iParamList2 : 0.tree = NULL;
iParam ID COLON type :
    0.tree = new IDTypeListNode(var=1.lexeme, type=3.type; size=3.size, next=0.next);
basicType INTEGER : 0.type = INTEGER;
basicType REAL : 0.type = REAL;
basicType BOOLEAN : 0.type = BOOLEAN;
type basicType : 0.type = 1.type; 0.size = 0;
type ARRAY SQBO cRange SQBC OF basicType : 0.type = 6.type; 0.size = 3.end; assert(3.beg == 1);
var ID whichID : 2.varname = 1.lexeme; 0.tree = 2.tree;
whichID SQBO index SQBC : 0.tree = new DerefNode(var=0.varname, index=2.tree);
whichID : 0.tree = new VarNode(var=0.varname);
aliteral var : 0.tree = 1.tree;
aliteral NUM : 0.tree = new NumNode(val=1.val);
aliteral RNUM : 0.tree = new RNumNode(val=1.val);
constant NUM : 0.tree = new NumNode(val=1.val);
constant RNUM : 0.tree = new RNumNode(val=1.val);
constant TRUE : 0.tree = new BoolNode(TRUE);
constant FALSE : 0.tree = new BoolNode(FALSE);
literal var : 0.tree = 1.tree;
literal constant :  0.tree = 1.tree;
index NUM : 0.tree = new NumNode(val=1.val);
index ID : 0.tree = new VarNode(varname=1.lexeme);
cRange NUM RANGEOP NUM : 0.beg = 1.val, 0.end = 3.val;

stmt inputStmt : 0.tree = 1.tree; 1.next = 0.next
stmt outputStmt : 0.tree = 1.tree; 1.next = 0.next
stmt assignStmt : 0.tree = 1.tree; 1.next = 0.next
stmt fCallStmt : 0.tree = 1.tree; 1.next = 0.next
stmt declareStmt : 0.tree = 1.tree; 1.next = 0.next
stmt condStmt : 0.tree = 1.tree; 1.next = 0.next
stmt forStmt : 0.tree = 1.tree; 1.next = 0.next
stmt whileStmt : 0.tree = 1.tree; 1.next = 0.next

inputStmt GET_VALUE BO ID BC SEMICOL : 0.tree = new InputNode(var=3.lexeme, next=0.next);
outputStmt PRINT BO aliteral BC SEMICOL : 0.tree = new OutputNode(var=3.tree, next=0.next);
assignStmt var ASSIGNOP expr SEMICOL :
    0.tree = new AssnNode(target=1.tree, expr=3.tree, next=0.next);
fCallStmt retCapture USE MODULE ID WITH PARAMETERS idList SEMICOL :
    0.tree = new FCallNode(name=4.lexeme, iParamList=7.tree, oParamList=1.tree, next=0.next);
retCapture SQBO idList SQBC ASSIGNOP : 0.tree = 2.tree;
retCapture : 0.tree = NULL;
idList ID idList2 : 0.tree = new IDListNode(var=1.lexeme, next=2.tree);
idList2 COMMA ID idList2 : 0.tree = new IDListNode(var=2.lexeme, next=3.tree);
idList2 : 0.tree = NULL;
declareStmt DECLARE idList COLON type SEMICOL :
    0.tree = new DeclNode(idList=2.tree, next=0.next, type=4.type, size=4.size);
condStmt SWITCH BO ID BC START caseStmt caseStmts defaultCase END :
    0.tree = new SwitchNode(var=3.lexeme, next=0.next, default=8.tree, cases=6.tree);
    6.next = 7.tree;
caseStmts caseStmt caseStmts : 0.tree = 1.tree; 1.next = 2.tree;
caseStmts : 0.tree = NULL;
caseStmt CASE constant COLON stmts BREAK SEMICOL :
    0.tree = new CaseNode(val=2.tree, stmts=4.tree, next=0.next);
defaultCase DEFAULT COLON stmts BREAK SEMICOL :
    0.tree = new CaseNode(val=NULL, stmts=3.tree, next=NULL);
defaultCase : 0.tree = NULL;
forStmt FOR BO ID IN cRange BC START stmts END :
    0.tree = new ForNode(beg=5.beg, end=5.end, var=3.varname, body=8.tree, next=0.next);
whileStmt WHILE BO expr BC START stmts END : 0.tree = new WhileNode(cond=3.tree, body=6.tree, next=0.next);

expr andExpr expr2 : 0.tree = 2.tree; 2.acc = 1.tree;
expr2 OR andExpr expr2 : 0.tree = 3.tree; 3.acc = new BOpNode(op=OR, arg1=0.acc, arg2=2.tree);
expr2 : 0.tree = 0.acc;
andExpr relExpr andExpr2 : 0.tree = 2.tree; 2.acc = 1.tree;
andExpr2 AND relExpr andExpr2 : 0.tree = 3.tree; 3.acc = new BOpNode(op=AND, arg1=0.acc, arg2=2.tree);
andExpr2 : 0.tree = 0.acc;
relExpr addExpr relExpr2 : 0.tree = 2.tree; 2.acc = 1.tree;
relExpr2 relOp addExpr relExpr2 : 0.tree = 3.tree; 3.acc = new BOpNode(op=1.op, arg1=0.acc, arg2=2.tree);
relExpr2 : 0.tree = 0.acc;
addExpr multExpr addExpr2 : 0.tree = 2.tree; 2.acc = 1.tree;
addExpr2 pmOp multExpr addExpr2 : 0.tree = 3.tree; 3.acc = new BOpNode(op=1.op, arg1=0.acc, arg2=2.tree);
addExpr2 : 0.tree = 0.acc;
multExpr unExpr multExpr2 : 0.tree = 2.tree; 2.acc = 1.tree;
multExpr2 mdOp unExpr multExpr2 : 0.tree = 3.tree; 3.acc = new BOpNode(op=1.op, arg1=0.acc, arg2=2.tree);
multExpr2 : 0.tree = 0.acc;

unExpr pmOp basicExpr : 0.tree = new UOpNode(arg=2.tree, op=1.op);
unExpr basicExpr : 0.tree = 1.tree;
basicExpr literal : 0.tree = 1.tree;
basicExpr BO expr BC : 0.tree = 2.tree;
pmOp PLUS : 0.op = PLUS;
pmOp MINUS : 0.op = MINUS;
relOp LT : 0.op = LT;
relOp LE : 0.op = LE;
relOp GT : 0.op = GT;
relOp GE : 0.op = GE;
relOp EQ : 0.op = EQ;
relOp NE : 0.op = NE;
mdOp MUL : 0.op = MUL;
mdOp DIV : 0.op = DIV;
